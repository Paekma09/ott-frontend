openapi: 3.0.1
info:
  title: OTT API
  description: 동영상 OTT 서비스 API 문서
  version: v1.0.0
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- BearerAuth: []
tags:
- name: 동영상
  description: 동영상 관련 API
- name: 회원
  description: 회원 인증/회원/프로필 API
- name: 동영상파일
  description: 동영상 파일 업로드/다운로드(스트리밍) API
paths:
  /api/users/updateProfile:
    put:
      tags:
      - 회원
      summary: 회원 정보 수정
      description: "사용자 ID로 회원 정보 수정 (닉네임, 프로필 이미지 등)"
      operationId: updateProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProfileResponse"
  /api/videos/file/upload:
    post:
      tags:
      - 동영상파일
      summary: 동영상 파일 업로드
      description: 동영상 파일과 메타데이터를 업로드하고 DB에 등록합니다.
      operationId: uploadVideo
      parameters:
      - name: title
        in: query
        required: true
        schema:
          type: string
      - name: description
        in: query
        required: false
        schema:
          type: string
      - name: userId
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/users/withdraw:
    post:
      tags:
      - 회원
      summary: 회원 탈퇴
      description: Role 변경으로 회원 탈퇴 처리
      operationId: withdraw
      parameters:
      - name: userId
        in: query
        description: 사용자 ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WithdrawResponse"
  /api/users/signup:
    post:
      tags:
      - 회원
      summary: 회원가입 (이메일 인증)
      description: 이메일 인증을 위한 회원가입 요청
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignupRequest"
        required: true
      responses:
        "200":
          description: 이메일 인증 메일 발송 성공
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CommonResponse"
        "400":
          description: 입력 오류/중복 이메일 등
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CommonResponse"
  /api/users/refresh:
    post:
      tags:
      - 회원
      summary: AccessToken 재발급
      description: RefreshToken 으로 AccessToken 재발급
      operationId: refreshToken
      parameters:
      - name: refreshToken
        in: query
        description: RefreshToken
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CommonResponse"
  /api/users/logout:
    post:
      tags:
      - 회원
      summary: 로그아웃
      description: RefreshToken을 무효화하여 로그아웃 처리
      operationId: logout
      parameters:
      - name: userId
        in: query
        description: 사용자 ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CommonResponse"
  /api/users/login:
    post:
      tags:
      - 회원
      summary: 로그인
      description: "이메일, 비밀번호로 로그인(이메일 인증된 사용자만 가능)"
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginRequest"
        required: true
      responses:
        "200":
          description: "로그인 성공, 토큰+유저 정보 반환"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: 입력 오류/인증 미완료/비밀번호 불일치 등
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
  /api/users/change-password:
    post:
      tags:
      - 회원
      summary: 비밀번호 변경
      description: 기존 비밀번호 확인 후 새 비밀번호 변경
      operationId: changePassword
      parameters:
      - name: userId
        in: query
        description: 사용자 ID
        required: true
        schema:
          type: integer
          format: int64
      - name: oldPassword
        in: query
        description: 기존 비밀번호
        required: true
        schema:
          type: string
      - name: newPassword
        in: query
        description: 새 비밀번호
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChangePasswordResponse"
  /api/videos:
    get:
      tags:
      - 동영상
      summary: 동영상 목록 조회
      description: 등록된 모든 동영상을 최신순으로 조회합니다.
      operationId: getVideoList
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VideoDto"
  /api/videos/{id}:
    get:
      tags:
      - 동영상
      summary: 동영상 상세 조회
      description: 동영상 ID로 특정 동영상을 조회합니다.
      operationId: getVideoDetail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/VideoDto"
  /api/videos/file/stream/{id}:
    get:
      tags:
      - 동영상파일
      summary: 동영상 스트리밍
      description: HTTP Range를 지원하는 동영상 스트리밍 API 입니다.
      operationId: streamVideo
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /api/users/verify:
    get:
      tags:
      - 회원
      summary: 이메일 인증
      description: 이메일 인증 토큰으로 회원 인증 완료
      operationId: verifyEmail
      parameters:
      - name: token
        in: query
        description: 이메일 인증 토큰
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CommonResponse"
  /api/users/profile:
    get:
      tags:
      - 회원
      summary: 프로필 조회
      description: 사용자 ID로 프로필 정보 조회
      operationId: getProfile
      parameters:
      - name: userId
        in: query
        description: 사용자 ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProfileResponse"
  /api/users/me:
    get:
      tags:
      - 회원
      summary: 토큰 기반 유저 정보 조회
      description: 현재 로그인된 사용자의 정보를 토큰 기반으로 조회
      operationId: getMyProfile
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProfileResponse"
components:
  schemas:
    UserUpdateRequest:
      required:
      - nickname
      type: object
      properties:
        nickname:
          type: string
          description: 별명/이름
          example: 장국영
        profileImageUrl:
          type: string
          description: 프로필 이미지 URL
          example: https://example.com/profile.jpg
      description: 회원 정보 수정 요청 DTO
    ProfileResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserDto"
      description: 프로필 조회 응답 DTO
    UserDto:
      type: object
      properties:
        id:
          type: integer
          description: 회원 고유번호
          format: int64
          example: 1
        email:
          type: string
          description: 이메일
          example: user123@xxx.com
        nickname:
          type: string
          description: 별명/이름
          example: 장국영
        profileImageUrl:
          type: string
          description: 프로필 이미지 URL
          example: https://example.com/profile.jpg
        role:
          type: string
          description: 권한
          example: USER
          enum:
          - USER
          - ADMIN
          - SUSPENDED
        createdAt:
          type: string
          description: 가입일
          format: date-time
      description: 회원 정보 DTO
    WithdrawResponse:
      type: object
      properties:
        success:
          type: boolean
          description: 회원 탈퇴 성공 여부
          example: true
        message:
          type: string
          description: 응답 메시지
          example: 회원 탈퇴가 완료되었습니다.
      description: 회원 탈퇴 응답 DTO
    UserSignupRequest:
      required:
      - email
      - nickname
      - password
      type: object
      properties:
        email:
          type: string
          description: 로그인 이메일
          example: user123@xxx.com
        password:
          maxLength: 30
          minLength: 8
          type: string
          description: 비밀번호(8~30자)
          example: pAssword123!
        nickname:
          type: string
          description: 별명
          example: 장국영
      description: 회원가입 요청 DTO
    CommonResponse:
      type: object
      properties:
        success:
          type: boolean
          description: 성공 여부
          example: true
        message:
          type: string
          description: 응답 메세지
          example: 처리 완료되었습니다.
      description: 공통 API 응답 DTO
    UserLoginRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: 로그인 이메일
          example: user123@xxx.com
        password:
          type: string
          description: 비밀번호
          example: pAssword123!
      description: 로그인 요청 DTO
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: Access Token(JWT)
        refreshToken:
          type: string
          description: Refresh Token
        refreshTokenExpireAt:
          type: string
          description: Refresh Token 만료 시간
          format: date-time
        user:
          $ref: "#/components/schemas/UserDto"
      description: 로그인 성공 응답 DTO
    ChangePasswordResponse:
      type: object
      properties:
        success:
          type: boolean
          description: 비밀번호 변경 성공 여부
          example: true
        message:
          type: string
          description: 응답 메시지
          example: 비밀번호가 성공적으로 변경되었습니다.
      description: 비밀번호 변경 응답 DTO
    VideoDto:
      required:
      - title
      type: object
      properties:
        id:
          type: integer
          description: 동영상 고유번호(PK)
          format: int64
          example: 1
        title:
          type: string
          description: 동영상 제목
          example: 영웅본색
        description:
          type: string
          description: 동영상 설명
          example: 홍콩 느와르의 대표작
        thumbnailUrl:
          type: string
          description: 썸네일 이미지 URL
          example: /uploads/thumb/sample.jpg
        playTime:
          type: integer
          description: 동영상 재생 시간(초)
          format: int64
          example: 5400
        uploadUserId:
          type: string
          description: 업로드한 회원 ID
          example: user123
        createdAt:
          type: string
          description: 업로드 일시(ISO8601)
          example: 2025-06-16T10:00:00
  securitySchemes:
    BearerAuth:
      type: http
      name: Authorization
      scheme: bearer
      bearerFormat: JWT
