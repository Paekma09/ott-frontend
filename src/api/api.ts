/* tslint:disable */
/* eslint-disable */
/**
 * OTT API
 * 동영상 OTT 서비스 API 문서
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 비밀번호 변경 응답 DTO
 * @export
 * @interface ChangePasswordResponse
 */
export interface ChangePasswordResponse {
    /**
     * 비밀번호 변경 성공 여부
     * @type {boolean}
     * @memberof ChangePasswordResponse
     */
    'success'?: boolean;
    /**
     * 응답 메시지
     * @type {string}
     * @memberof ChangePasswordResponse
     */
    'message'?: string;
}
/**
 * 공통 API 응답 DTO
 * @export
 * @interface CommonResponse
 */
export interface CommonResponse {
    /**
     * 성공 여부
     * @type {boolean}
     * @memberof CommonResponse
     */
    'success'?: boolean;
    /**
     * 응답 메세지
     * @type {string}
     * @memberof CommonResponse
     */
    'message'?: string;
}
/**
 * 로그인 성공 응답 DTO
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * Access Token(JWT)
     * @type {string}
     * @memberof LoginResponse
     */
    'accessToken'?: string;
    /**
     * Refresh Token
     * @type {string}
     * @memberof LoginResponse
     */
    'refreshToken'?: string;
    /**
     * Refresh Token 만료 시간
     * @type {string}
     * @memberof LoginResponse
     */
    'refreshTokenExpireAt'?: string;
    /**
     * 
     * @type {UserDto}
     * @memberof LoginResponse
     */
    'user'?: UserDto;
}
/**
 * 프로필 조회 응답 DTO
 * @export
 * @interface ProfileResponse
 */
export interface ProfileResponse {
    /**
     * 
     * @type {UserDto}
     * @memberof ProfileResponse
     */
    'user'?: UserDto;
}
/**
 * 회원 정보 DTO
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 회원 고유번호
     * @type {number}
     * @memberof UserDto
     */
    'id'?: number;
    /**
     * 이메일
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string;
    /**
     * 별명/이름
     * @type {string}
     * @memberof UserDto
     */
    'nickname'?: string;
    /**
     * 프로필 이미지 URL
     * @type {string}
     * @memberof UserDto
     */
    'profileImageUrl'?: string;
    /**
     * 권한
     * @type {string}
     * @memberof UserDto
     */
    'role'?: UserDtoRoleEnum;
    /**
     * 가입일
     * @type {string}
     * @memberof UserDto
     */
    'createdAt'?: string;
}

export const UserDtoRoleEnum = {
    User: 'USER',
    Admin: 'ADMIN',
    Suspended: 'SUSPENDED'
} as const;

export type UserDtoRoleEnum = typeof UserDtoRoleEnum[keyof typeof UserDtoRoleEnum];

/**
 * 로그인 요청 DTO
 * @export
 * @interface UserLoginRequest
 */
export interface UserLoginRequest {
    /**
     * 로그인 이메일
     * @type {string}
     * @memberof UserLoginRequest
     */
    'email': string;
    /**
     * 비밀번호
     * @type {string}
     * @memberof UserLoginRequest
     */
    'password': string;
}
/**
 * 회원가입 요청 DTO
 * @export
 * @interface UserSignupRequest
 */
export interface UserSignupRequest {
    /**
     * 로그인 ID
     * @type {string}
     * @memberof UserSignupRequest
     */
    'email': string;
    /**
     * 비밀번호(8~30자)
     * @type {string}
     * @memberof UserSignupRequest
     */
    'password': string;
    /**
     * 별명
     * @type {string}
     * @memberof UserSignupRequest
     */
    'nickname': string;
}
/**
 * 
 * @export
 * @interface VideoDto
 */
export interface VideoDto {
    /**
     * 동영상 고유번호(PK)
     * @type {number}
     * @memberof VideoDto
     */
    'id'?: number;
    /**
     * 동영상 제목
     * @type {string}
     * @memberof VideoDto
     */
    'title': string;
    /**
     * 동영상 설명
     * @type {string}
     * @memberof VideoDto
     */
    'description'?: string;
    /**
     * 썸네일 이미지 URL
     * @type {string}
     * @memberof VideoDto
     */
    'thumbnailUrl'?: string;
    /**
     * 동영상 재생 시간(초)
     * @type {number}
     * @memberof VideoDto
     */
    'playTime'?: number;
    /**
     * 업로드한 회원 ID
     * @type {string}
     * @memberof VideoDto
     */
    'uploadUserId'?: string;
    /**
     * 업로드 일시(ISO8601)
     * @type {string}
     * @memberof VideoDto
     */
    'createdAt'?: string;
}
/**
 * 회원 탈퇴 응답 DTO
 * @export
 * @interface WithdrawResponse
 */
export interface WithdrawResponse {
    /**
     * 회원 탈퇴 성공 여부
     * @type {boolean}
     * @memberof WithdrawResponse
     */
    'success'?: boolean;
    /**
     * 응답 메시지
     * @type {string}
     * @memberof WithdrawResponse
     */
    'message'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 기존 비밀번호 확인 후 새 비밀번호 변경
         * @summary 비밀번호 변경
         * @param {number} userId 사용자 ID
         * @param {string} oldPassword 기존 비밀번호
         * @param {string} newPassword 새 비밀번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (userId: number, oldPassword: string, newPassword: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('changePassword', 'userId', userId)
            // verify required parameter 'oldPassword' is not null or undefined
            assertParamExists('changePassword', 'oldPassword', oldPassword)
            // verify required parameter 'newPassword' is not null or undefined
            assertParamExists('changePassword', 'newPassword', newPassword)
            const localVarPath = `/api/users/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (oldPassword !== undefined) {
                localVarQueryParameter['oldPassword'] = oldPassword;
            }

            if (newPassword !== undefined) {
                localVarQueryParameter['newPassword'] = newPassword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 현재 로그인된 사용자의 정보를 토큰 기반으로 조회
         * @summary 토큰 기반 유저 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 ID로 프로필 정보 조회
         * @summary 프로필 조회
         * @param {number} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getProfile', 'userId', userId)
            const localVarPath = `/api/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 동영상 ID로 특정 동영상을 조회합니다.
         * @summary 동영상 상세 조회
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoDetail: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVideoDetail', 'id', id)
            const localVarPath = `/api/videos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 등록된 모든 동영상을 최신순으로 조회합니다.
         * @summary 동영상 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 이메일, 비밀번호로 로그인(이메일 인증된 사용자만 가능)
         * @summary 로그인
         * @param {UserLoginRequest} userLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (userLoginRequest: UserLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginRequest' is not null or undefined
            assertParamExists('login', 'userLoginRequest', userLoginRequest)
            const localVarPath = `/api/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * RefreshToken을 무효화하여 로그아웃 처리
         * @summary 로그아웃
         * @param {number} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('logout', 'userId', userId)
            const localVarPath = `/api/users/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * RefreshToken 으로 AccessToken 재발급
         * @summary AccessToken 재발급
         * @param {string} refreshToken RefreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists('refreshToken', 'refreshToken', refreshToken)
            const localVarPath = `/api/users/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (refreshToken !== undefined) {
                localVarQueryParameter['refreshToken'] = refreshToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 이메일 인증을 위한 회원가입 요청
         * @summary 회원가입 (이메일 인증)
         * @param {UserSignupRequest} userSignupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup: async (userSignupRequest: UserSignupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userSignupRequest' is not null or undefined
            assertParamExists('signup', 'userSignupRequest', userSignupRequest)
            const localVarPath = `/api/users/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSignupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * HTTP Range를 지원하는 동영상 스트리밍 API 입니다.
         * @summary 동영상 스트리밍
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideo: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('streamVideo', 'id', id)
            const localVarPath = `/api/videos/file/stream/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 동영상 파일과 메타데이터를 업로드하고 DB에 등록합니다.
         * @summary 동영상 파일 업로드
         * @param {string} title 
         * @param {string} userId 
         * @param {File} file 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadVideo: async (title: string, userId: string, file: File, description?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('uploadVideo', 'title', title)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('uploadVideo', 'userId', userId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadVideo', 'file', file)
            const localVarPath = `/api/videos/file/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 이메일 인증 토큰으로 회원 인증 완료
         * @summary 이메일 인증
         * @param {string} token 이메일 인증 토큰
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('verifyEmail', 'token', token)
            const localVarPath = `/api/users/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Role 변경으로 회원 탈퇴 처리
         * @summary 회원 탈퇴
         * @param {number} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdraw: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('withdraw', 'userId', userId)
            const localVarPath = `/api/users/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 기존 비밀번호 확인 후 새 비밀번호 변경
         * @summary 비밀번호 변경
         * @param {number} userId 사용자 ID
         * @param {string} oldPassword 기존 비밀번호
         * @param {string} newPassword 새 비밀번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(userId: number, oldPassword: string, newPassword: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangePasswordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(userId, oldPassword, newPassword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.changePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 현재 로그인된 사용자의 정보를 토큰 기반으로 조회
         * @summary 토큰 기반 유저 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMyProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 사용자 ID로 프로필 정보 조회
         * @summary 프로필 조회
         * @param {number} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 동영상 ID로 특정 동영상을 조회합니다.
         * @summary 동영상 상세 조회
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoDetail(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoDetail(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVideoDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 등록된 모든 동영상을 최신순으로 조회합니다.
         * @summary 동영상 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VideoDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVideoList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 이메일, 비밀번호로 로그인(이메일 인증된 사용자만 가능)
         * @summary 로그인
         * @param {UserLoginRequest} userLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(userLoginRequest: UserLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(userLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * RefreshToken을 무효화하여 로그아웃 처리
         * @summary 로그아웃
         * @param {number} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * RefreshToken 으로 AccessToken 재발급
         * @summary AccessToken 재발급
         * @param {string} refreshToken RefreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 이메일 인증을 위한 회원가입 요청
         * @summary 회원가입 (이메일 인증)
         * @param {UserSignupRequest} userSignupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signup(userSignupRequest: UserSignupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signup(userSignupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.signup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * HTTP Range를 지원하는 동영상 스트리밍 API 입니다.
         * @summary 동영상 스트리밍
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamVideo(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamVideo(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.streamVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 동영상 파일과 메타데이터를 업로드하고 DB에 등록합니다.
         * @summary 동영상 파일 업로드
         * @param {string} title 
         * @param {string} userId 
         * @param {File} file 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadVideo(title: string, userId: string, file: File, description?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadVideo(title, userId, file, description, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uploadVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 이메일 인증 토큰으로 회원 인증 완료
         * @summary 이메일 인증
         * @param {string} token 이메일 인증 토큰
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmail(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmail(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.verifyEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Role 변경으로 회원 탈퇴 처리
         * @summary 회원 탈퇴
         * @param {number} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdraw(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WithdrawResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdraw(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.withdraw']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 기존 비밀번호 확인 후 새 비밀번호 변경
         * @summary 비밀번호 변경
         * @param {number} userId 사용자 ID
         * @param {string} oldPassword 기존 비밀번호
         * @param {string} newPassword 새 비밀번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(userId: number, oldPassword: string, newPassword: string, options?: RawAxiosRequestConfig): AxiosPromise<ChangePasswordResponse> {
            return localVarFp.changePassword(userId, oldPassword, newPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 현재 로그인된 사용자의 정보를 토큰 기반으로 조회
         * @summary 토큰 기반 유저 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyProfile(options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse> {
            return localVarFp.getMyProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 ID로 프로필 정보 조회
         * @summary 프로필 조회
         * @param {number} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse> {
            return localVarFp.getProfile(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 동영상 ID로 특정 동영상을 조회합니다.
         * @summary 동영상 상세 조회
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoDetail(id: number, options?: RawAxiosRequestConfig): AxiosPromise<VideoDto> {
            return localVarFp.getVideoDetail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 등록된 모든 동영상을 최신순으로 조회합니다.
         * @summary 동영상 목록 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoList(options?: RawAxiosRequestConfig): AxiosPromise<Array<VideoDto>> {
            return localVarFp.getVideoList(options).then((request) => request(axios, basePath));
        },
        /**
         * 이메일, 비밀번호로 로그인(이메일 인증된 사용자만 가능)
         * @summary 로그인
         * @param {UserLoginRequest} userLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userLoginRequest: UserLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.login(userLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * RefreshToken을 무효화하여 로그아웃 처리
         * @summary 로그아웃
         * @param {number} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponse> {
            return localVarFp.logout(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * RefreshToken 으로 AccessToken 재발급
         * @summary AccessToken 재발급
         * @param {string} refreshToken RefreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshToken: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponse> {
            return localVarFp.refreshToken(refreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 이메일 인증을 위한 회원가입 요청
         * @summary 회원가입 (이메일 인증)
         * @param {UserSignupRequest} userSignupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(userSignupRequest: UserSignupRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponse> {
            return localVarFp.signup(userSignupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * HTTP Range를 지원하는 동영상 스트리밍 API 입니다.
         * @summary 동영상 스트리밍
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamVideo(id: number, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.streamVideo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 동영상 파일과 메타데이터를 업로드하고 DB에 등록합니다.
         * @summary 동영상 파일 업로드
         * @param {string} title 
         * @param {string} userId 
         * @param {File} file 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadVideo(title: string, userId: string, file: File, description?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.uploadVideo(title, userId, file, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 이메일 인증 토큰으로 회원 인증 완료
         * @summary 이메일 인증
         * @param {string} token 이메일 인증 토큰
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail(token: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponse> {
            return localVarFp.verifyEmail(token, options).then((request) => request(axios, basePath));
        },
        /**
         * Role 변경으로 회원 탈퇴 처리
         * @summary 회원 탈퇴
         * @param {number} userId 사용자 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdraw(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<WithdrawResponse> {
            return localVarFp.withdraw(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 기존 비밀번호 확인 후 새 비밀번호 변경
     * @summary 비밀번호 변경
     * @param {number} userId 사용자 ID
     * @param {string} oldPassword 기존 비밀번호
     * @param {string} newPassword 새 비밀번호
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public changePassword(userId: number, oldPassword: string, newPassword: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).changePassword(userId, oldPassword, newPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 현재 로그인된 사용자의 정보를 토큰 기반으로 조회
     * @summary 토큰 기반 유저 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyProfile(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 ID로 프로필 정보 조회
     * @summary 프로필 조회
     * @param {number} userId 사용자 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProfile(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 동영상 ID로 특정 동영상을 조회합니다.
     * @summary 동영상 상세 조회
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVideoDetail(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVideoDetail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 등록된 모든 동영상을 최신순으로 조회합니다.
     * @summary 동영상 목록 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVideoList(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVideoList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 이메일, 비밀번호로 로그인(이메일 인증된 사용자만 가능)
     * @summary 로그인
     * @param {UserLoginRequest} userLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(userLoginRequest: UserLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(userLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * RefreshToken을 무효화하여 로그아웃 처리
     * @summary 로그아웃
     * @param {number} userId 사용자 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * RefreshToken 으로 AccessToken 재발급
     * @summary AccessToken 재발급
     * @param {string} refreshToken RefreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshToken(refreshToken: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refreshToken(refreshToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 이메일 인증을 위한 회원가입 요청
     * @summary 회원가입 (이메일 인증)
     * @param {UserSignupRequest} userSignupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signup(userSignupRequest: UserSignupRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signup(userSignupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * HTTP Range를 지원하는 동영상 스트리밍 API 입니다.
     * @summary 동영상 스트리밍
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public streamVideo(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).streamVideo(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 동영상 파일과 메타데이터를 업로드하고 DB에 등록합니다.
     * @summary 동영상 파일 업로드
     * @param {string} title 
     * @param {string} userId 
     * @param {File} file 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadVideo(title: string, userId: string, file: File, description?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadVideo(title, userId, file, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 이메일 인증 토큰으로 회원 인증 완료
     * @summary 이메일 인증
     * @param {string} token 이메일 인증 토큰
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyEmail(token: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyEmail(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Role 변경으로 회원 탈퇴 처리
     * @summary 회원 탈퇴
     * @param {number} userId 사용자 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public withdraw(userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).withdraw(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



